version: '3.8'

services:
  # Redis Cache Service
  redis:
    image: redis:7-alpine
    container_name: leaderoracle-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/etc/redis/redis.conf
    command: redis-server /etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - leaderoracle-network

  # LeaderOracle Backend API (Production)
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: leaderoracle-api
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379/0
      - CACHE_ENABLED=true
      - AUTH_KEY=${AUTH_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - MODEL_DIR=/app/models
      - LOG_LEVEL=INFO
    volumes:
      - ./models:/app/models:ro
      - ./logs:/app/logs
      - ./prompt.txt:/app/prompt.txt:ro
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - leaderoracle-network

  # LeaderOracle Backend API (Development)
  api-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: leaderoracle-api-dev
    ports:
      - "8001:8000"
    environment:
      - REDIS_URL=redis://redis:6379/1
      - CACHE_ENABLED=true
      - AUTH_KEY=${AUTH_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - MODEL_DIR=/app/models
      - LOG_LEVEL=DEBUG
    volumes:
      - .:/app
      - ./models:/app/models:ro
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    profiles:
      - development
    networks:
      - leaderoracle-network

  # Test Runner
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile
      target: testing
    container_name: leaderoracle-tests
    environment:
      - REDIS_URL=redis://redis:6379/2
      - CACHE_ENABLED=true
      - AUTH_KEY=test-auth-key-hash
      - OPENAI_API_KEY=test-openai-key
      - OPENROUTER_API_KEY=test-openrouter-key
    volumes:
      - .:/app
      - ./test-reports:/app/test-reports
    depends_on:
      redis:
        condition: service_healthy
    profiles:
      - testing
    networks:
      - leaderoracle-network

  # Redis Commander (Web UI for Redis)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: leaderoracle-redis-commander
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=admin
      - HTTP_PASSWORD=admin
    depends_on:
      redis:
        condition: service_healthy
    profiles:
      - monitoring
    networks:
      - leaderoracle-network

  # Nginx Load Balancer (Optional)
  nginx:
    image: nginx:alpine
    container_name: leaderoracle-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    profiles:
      - production
    networks:
      - leaderoracle-network

  # Prometheus for Metrics (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: leaderoracle-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    profiles:
      - monitoring
    networks:
      - leaderoracle-network

  # Grafana for Visualization (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: leaderoracle-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    profiles:
      - monitoring
    networks:
      - leaderoracle-network

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  leaderoracle-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Additional configurations for different environments
# Usage:
#   Production: docker-compose up api redis
#   Development: docker-compose --profile development up api-dev redis
#   Testing: docker-compose --profile testing up test-runner redis
#   Monitoring: docker-compose --profile monitoring up api redis redis-commander prometheus grafana 